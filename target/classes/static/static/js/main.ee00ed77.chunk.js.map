{"version":3,"sources":["AppNavbar.js","Home.js","PlanList.js","PlanEdit.js","App.js","serviceWorker.js","index.js"],"names":["AppNavbar","props","state","isOpen","toggle","bind","this","setState","color","dark","expand","tag","Link","to","onClick","navbar","className","href","Component","Home","isLoading","isAuthenticated","user","undefined","cookies","csrfToken","get","login","logout","fetch","credentials","response","text","body","JSON","parse","port","window","location","hostname","method","headers","then","res","json","logoutUrl","idToken","origin","message","name","button","fluid","withCookies","PlanList","plans","remove","data","id","updatedPlans","filter","i","planList","map","plan","address","city","county","postCode","key","style","whiteSpace","phone","notes","size","width","withRouter","PlanEdit","emptyItem","country","item","handleChange","handleSubmit","match","params","history","push","event","target","value","preventDefault","stringify","title","onSubmit","for","type","onChange","App","Switch","Route","path","exact","component","GroupList","GroupEdit","Boolean","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee00ed77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Nav, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\n\nexport default class AppNavbar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {isOpen: false};\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return <Navbar color=\"dark\" dark expand=\"md\">\n      <NavbarBrand tag={Link} to=\"/\">Home</NavbarBrand>\n      <NavbarToggler onClick={this.toggle}/>\n      <Collapse isOpen={this.state.isOpen} navbar>\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink\n              href=\"https://twitter.com/rakimsv\">@rakimsv</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink href=\"https://github.com/rakimsv\">GitHub</NavLink>\n          </NavItem>\n        </Nav>\n      </Collapse>\n    </Navbar>;\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport AppNavbar from './AppNavbar';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'reactstrap';\nimport { withCookies } from 'react-cookie';\n\nclass Home extends Component {\n  state = {\n    isLoading: true,\n    isAuthenticated: false,\n    user: undefined\n  };\n\n  constructor(props) {\n    super(props);\n    const {cookies} = props;\n    this.state.csrfToken = cookies.get('XSRF-TOKEN');\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n  }\n\n  async componentDidMount() {\n    const response = await fetch('/api/user', {credentials: 'include'});\n    const body = await response.text();\n    if (body === '') {\n      this.setState(({isAuthenticated: false}))\n    } else {\n      this.setState({isAuthenticated: true, user: JSON.parse(body)})\n    }\n  }\n\n  login() {\n    let port = (window.location.port ? ':' + window.location.port : '');\n    if (port === ':3000') {\n      port = ':8080';\n    }\n    window.location.href = '//' + window.location.hostname + port + '/private';\n  }\n\n  logout() {\n    fetch('/api/logout', {method: 'POST', credentials: 'include',\n      headers: {'X-XSRF-TOKEN': this.state.csrfToken}}).then(res => res.json())\n      .then(response => {\n        window.location.href = response.logoutUrl + \"?id_token_hint=\" +\n          response.idToken + \"&post_logout_redirect_uri=\" + window.location.origin;\n      });\n  }\n\n  render() {\n    const message = this.state.user ?\n      <h2>Welcome, {this.state.user.name}!</h2> :\n      <p>Please log in to manage your contacts :)</p>;\n\n    const button = this.state.isAuthenticated ?\n      <div>\n        <Button color=\"default\"><Link to=\"/plans\">Manage contacts</Link></Button>\n        <br/>\n        <br/>\n        <Button color=\"danger\" onClick={this.logout}>Log out</Button>\n      </div> :\n      <Button color=\"success\" onClick={this.login}>Log in</Button>;\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          {message}\n          {button}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(Home);","import React, { Component } from 'react';\nimport { Button, ButtonGroup, Container, Table } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { Link, withRouter } from 'react-router-dom';\nimport { instanceOf } from 'prop-types';\nimport { withCookies, Cookies } from 'react-cookie';\n\nclass PlanList extends Component {\n\t static propTypes = {\n\t\t    cookies: instanceOf(Cookies).isRequired\n\t\t  };\n\n  constructor(props) {\n    super(props);\n    const {cookies} = props;\n    this.state = {plans: [], csrfToken: cookies.get('XSRF-TOKEN'), isLoading: true};\n    this.remove = this.remove.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({isLoading: true});\n\n    fetch('api/plans', {credentials: 'include'})\n      .then(response => response.json())\n      .then(data => this.setState({plans: data, isLoading: false}));\n\n  }\n\n  async remove(id) {\n    await fetch(`/api/plan/${id}`, {\n      method: 'DELETE',\n      headers: {\n    \t'X-XSRF-TOKEN': this.state.csrfToken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    }).then(() => {\n      let updatedPlans = [...this.state.plans].filter(i => i.id !== id);\n      this.setState({plans: updatedPlans});\n    });\n  }\n\n  render() {\n    const {plans, isLoading} = this.state;\n\n    if (isLoading) {\n      return <p>Loading...</p>;\n    }\n\n    const planList = plans.map(plan => {\n      const address = `${plan.address || ''} ${plan.city || ''} ${plan.county || ''} ${plan.postCode || ''}`;\n      return <tr key={plan.id}>\n        <td style={{whiteSpace: 'nowrap'}}>{plan.name}</td>\n        <td style={{whiteSpace: 'nowrap'}}>{plan.phone}</td>\n        <td>{address}</td>\n        <td style={{whiteSpace: 'nowrap'}}>{plan.notes}</td>\n        <td>\n          <ButtonGroup>\n            <Button size=\"sm\" color=\"info\" tag={Link} to={\"/plans/\" + plan.id}>Update</Button>\n            <Button size=\"sm\" color=\"danger\" onClick={() => this.remove(plan.id)}>Delete</Button>\n          </ButtonGroup>\n        </td>\n      </tr>\n    });\n\n    return (\n      <div>\n        <AppNavbar/>\n        <Container fluid>\n          <div className=\"float-right\">\n            <Button color=\"success\" tag={Link} to=\"/plans/new\">Create</Button>\n          </div>\n          <h3>My Contacts</h3>\n          <Table className=\"mt-4\">\n            <thead>\n            <tr>\n              <th width=\"20%\">Name</th>\n              <th width=\"15%\">Phone</th>\n              <th width=\"20%\">Address</th>\n              <th>Notes</th>\n              <th width=\"10%\">Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            {planList}\n            </tbody>\n          </Table>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default withCookies(withRouter(PlanList));","import React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\nimport { instanceOf } from 'prop-types';\nimport { Cookies, withCookies } from 'react-cookie';\n\nclass PlanEdit extends Component {\n\tstatic propTypes = {\n\t    cookies: instanceOf(Cookies).isRequired\n\t  };\n\n  emptyItem = {\n    name: '',\n    address: '',\n    city: '',\n    county: '',\n    country: '',\n    postCode: '',\n    notes: ''\n  };\n\n  constructor(props) {\n\t    super(props);\n\t    const {cookies} = props;\n\t    this.state = {\n\t      item: this.emptyItem,\n\t      csrfToken: cookies.get('XSRF-TOKEN')\n\t    };\n\t    this.handleChange = this.handleChange.bind(this);\n\t    this.handleSubmit = this.handleSubmit.bind(this);\n\t  }\n\n  async componentDidMount() {\n    if (this.props.match.params.id !== 'new') {\n     try {\n       const plan = await (await fetch(`/api/plan/${this.props.match.params.id}`)).json();\n       this.setState({item: plan});\n     } catch (error) {\n       this.props.history.push('/');\n     }\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = {...this.state.item};\n    item[name] = value;\n    this.setState({item});\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {item, csrfToken} = this.state;\n\n    await fetch('/api/plan', {\n      method: (item.id) ? 'POST' : 'POST',\n      headers: {\n    \t'X-XSRF-TOKEN': this.state.csrfToken,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item),\n    });\n    this.props.history.push('/plans');\n  }\n\n  render() {\n    const {item} = this.state;\n    const title = <h2>{item.id ? 'Edit Contact' : 'Add Contact'}</h2>;\n\n    return <div>\n      <AppNavbar/>\n      <Container>\n        {title}\n        <Form onSubmit={this.handleSubmit}>\n          <FormGroup>\n            <Label for=\"name\">Name</Label>\n            <Input type=\"text\" name=\"name\" id=\"name\" value={item.name || ''}\n                   onChange={this.handleChange}/>\n          </FormGroup>\n\t      <FormGroup>\n\t        <Label for=\"name\">Phone Number</Label>\n\t        <Input type=\"text\" name=\"phone\" id=\"phone\" value={item.phone || ''}\n\t               onChange={this.handleChange}/>\n\t      </FormGroup>\n          <FormGroup>\n            <Label for=\"address\">Address</Label>\n            <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\n                   onChange={this.handleChange}/>\n          </FormGroup>\n          <FormGroup>\n            <Label for=\"city\">City</Label>\n            <Input type=\"text\" name=\"city\" id=\"city\" value={item.city || ''}\n                   onChange={this.handleChange}/>\n          </FormGroup>\n          <div className=\"row\">\n            <FormGroup className=\"col-md-4 mb-3\">\n              <Label for=\"county\">County</Label>\n              <Input type=\"text\" name=\"county\" id=\"county\" value={item.county || ''}\n                     onChange={this.handleChange}/>\n            </FormGroup>\n            <FormGroup className=\"col-md-5 mb-3\">\n              <Label for=\"country\">Country</Label>\n              <Input type=\"text\" name=\"country\" id=\"country\" value={item.country || ''}\n                     onChange={this.handleChange}/>\n            </FormGroup>\n            <FormGroup className=\"col-md-3 mb-3\">\n              <Label for=\"country\">Post Code</Label>\n              <Input type=\"text\" name=\"postCode\" id=\"postCode\" value={item.postCode || ''}\n                     onChange={this.handleChange}/>\n            </FormGroup>\n          </div>\n\t        <FormGroup>\n\t          <Label for=\"notes\">Notes</Label>\n\t          <Input type=\"text\" name=\"notes\" id=\"notes\" value={item.notes || ''}\n\t                 onChange={this.handleChange}/>\n\t        </FormGroup>          \n          <FormGroup>\n            <Button color=\"success\" type=\"submit\">Save</Button>{' '}\n            <Button color=\"danger\" tag={Link} to=\"/plans\">Cancel</Button>\n          </FormGroup>\n        </Form>\n      </Container>\n    </div>\n  }\n}\n\nexport default withCookies(withRouter(PlanEdit));","import React, { Component } from 'react';\nimport './App.css';\nimport Home from './Home';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport GroupList from './PlanList';\nimport GroupEdit from './PlanEdit';\nimport { CookiesProvider } from 'react-cookie';\n\nclass App extends Component {\n  render() {\n    return (\n      <CookiesProvider>\n        <Router>\n          <Switch>\n            <Route path='/' exact={true} component={Home}/>\n            <Route path='/plans' exact={true} component={GroupList}/>\n            <Route path='/plans/:id' component={GroupEdit}/>\n          </Switch>\n        </Router>\n      </CookiesProvider>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}